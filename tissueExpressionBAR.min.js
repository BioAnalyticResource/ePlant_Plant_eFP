let existingStrokeData={};function addTissueMetadata(e){var t,s,a;e.includes("Half_Leaf_Pseudomonas_syringae")&&(e+="_outline"),document.getElementById(createSVGExpressionData.svgObjectName)&&document.getElementById(createSVGExpressionData.svgObjectName)&&(a=(s=(t=document.getElementById(createSVGExpressionData.svgObjectName)).getElementById(e)).childNodes);var i=void 0,o=void 0;if(t&&s){if(s.getAttribute("stroke-width"))i=s.getAttribute("stroke-width"),s.getAttribute("stroke")&&(o=s.getAttribute("stroke"));else if(a.length>0)for(var r=0;r<a.length;r++)"path"===a[r].nodeName&&(a[r].getAttribute("stroke-width")&&(i=a[r].getAttribute("stroke-width")),a[r].getAttribute("stroke")&&(o=a[r].getAttribute("stroke")));if(existingStrokeData[e]||(existingStrokeData[e]={},existingStrokeData[e].strokeWidth=i,existingStrokeData[e].strokeColour=o,existingStrokeData[e].addedMetadata=!1),t.getElementById(e)&&!existingStrokeData[e].addedMetadata){existingStrokeData[e].addedMetadata=!0;var n=t.getElementById(e),l=2.25*(i=Number(i));l>2.25&&2.25>i?l=2.25:l<1.125&&1.125>i?l=1.125:0===l?l=2.25:l||(l=1.125);var d=!1;if(n.getAttribute("stroke-width"))t.getElementById(e).setAttribute("stroke-width",l),t.getElementById(e).setAttribute("stroke","#000"),d=!0;else if(a&&a.length>0)for(r=0;r<a.length;r++)"path"===a[r].nodeName&&a[r].getAttribute("stroke-width")&&(a[r].setAttribute("stroke-width",l),a[r].getAttribute("stroke")&&a[r].setAttribute("stroke","#000"),d=!0);d||(t.getElementById(e).setAttribute("stroke-width",l),t.getElementById(e).setAttribute("stroke","#000"))}}}function removeTissueMetadata(e){e.includes("Half_Leaf_Pseudomonas_syringae")&&(e+="_outline");var t,s,a;if(document.getElementById(createSVGExpressionData.svgObjectName)&&document.getElementById(createSVGExpressionData.svgObjectName)&&(a=(s=(t=document.getElementById(createSVGExpressionData.svgObjectName)).getElementById(e)).childNodes),existingStrokeData[e]&&existingStrokeData[e].addedMetadata)if(existingStrokeData[e].addedMetadata=!1,s&&s.getAttribute("stroke-width"))Number(existingStrokeData[e].strokeWidth)>=0?t.getElementById(e).setAttribute("stroke-width",existingStrokeData[e].strokeWidth):existingStrokeData[e].strokeWidth?t.getElementById(e).setAttribute("stroke-width",1):t.getElementById(e).removeAttribute("stroke-width"),s.getAttribute("stroke")&&(existingStrokeData[e].strokeColour?t.getElementById(e).setAttribute("stroke",existingStrokeData[e].strokeColour):t.getElementById(e).setAttribute("stroke","#000"));else if(a.length>0)for(var i=0;i<a.length;i++)"path"===a[i].nodeName&&(a[i].getAttribute("stroke-width")&&(Number(existingStrokeData[e].strokeWidth)>=0?a[i].setAttribute("stroke-width",existingStrokeData[e].strokeWidth):existingStrokeData[e].strokeWidth?a[i].setAttribute("stroke-width",1):t.getElementById(e).removeAttribute("stroke-width")),a[i].getAttribute("stroke")&&(existingStrokeData[e].strokeColour?a[i].setAttribute("stroke",existingStrokeData[e].strokeColour):a[i].setAttribute("stroke","#000")));else s.setAttribute("stroke-width",1),s.setAttribute("stroke","#000")}class CreateSVGExpressionData{constructor(){this.eFPObjects={},this.sampleData={},this.sampleOptions=[],this.sampleReadableName={},this.topExpressionValues={},this.expressionValues={},this.topExpressionOptions=["Microarray","RNA-seq"],this.desiredDOMid="",this.appendSVG,this.clickList=[],this.svgValues={},this.svgMax=0,this.svgMin=0,this.svgMaxAverage=0,this.svgMaxAverageSample="",this.svgMinAverage=0,this.svgMinAverageSample="",this.svgObjectName=""}generateSVG(e="AT3G24650",t,s="default",a=!0){this.svgValues={},this.svgMax=void 0,this.svgMin=void 0,this.svgMaxAverage=void 0,this.svgMaxAverageSample=void 0,this.svgMinAverage=void 0,this.svgMinAverageSample=void 0,this.includeDropdownAll=a,!1===this.clickList.includes(s)&&this.clickList.push(s),this.desiredDOMid=t,this.retrieveTopExpressionValues(s,e.toUpperCase())}async retrieveTopExpressionValues(e,t="AT3G24650"){var s=0;if(this.topExpressionValues&&this.topExpressionValues[t])Object.keys(this.topExpressionValues[t]).length>0&&await this.loadSampleData(e,t);else for(var a=0;a<this.topExpressionOptions.length;a++){var i=this.topExpressionOptions[a];let n=`https://bar.utoronto.ca/expression_max_api/max_average?method=${i}`;var o={loci:[t.toUpperCase()],method:i};o=JSON.stringify(o);var r={mode:"cors",method:"POST",headers:{}};r.headers["Content-type"]="application/json",r.body=o,await fetch(n,r).then(async a=>{200===a.status?await a.text().then(async a=>{let i;var o;i=a.length>0?JSON.parse(a):{};var r=n.split("=");if(r.length>1&&(o=r[1]),o&&i&&!0===i.wasSuccessful&&i.maxAverage){var l={};l[o]={},l[o].maxAverage=i.maxAverage[t.toUpperCase()],i.standardDeviation&&(l[o].standardDeviation=i.standardDeviation[t.toUpperCase()]),i.sample&&(l[o].sample=i.sample[t.toUpperCase()]),i.compendium&&(l[o].compendium=i.compendium[t.toUpperCase()]),this.topExpressionValues||(this.topExpressionValues={}),this.topExpressionValues[t]={...this.topExpressionValues[t],...l}}++s===this.topExpressionOptions.length&&await this.loadSampleData(e,t)}):200!==a.status&&(++s===this.topExpressionOptions.length&&await this.loadSampleData(e,t),console.error("fetch error - Status Code: "+a.status+", fetch-url: "+a.url+", document-url: "+window.location.href))}).catch(async a=>{++s===this.topExpressionOptions.length&&await this.loadSampleData(e,t),console.error(a)})}}async loadSampleData(e,t){if(0===Object.keys(this.sampleData).length){let s="https://raw.githubusercontent.com/BioAnalyticResource/ePlant_Plant_eFP/master/data/SampleData.min.json";await fetch(s,{mode:"cors"}).then(async s=>{200===s.status?await s.text().then(async s=>{let a;a=s.length>0?JSON.parse(s):{},this.sampleData=a,await this.retrieveSampleData(e,t)}):200!==s.status&&console.error("fetch error - Status Code: "+s.status+", fetch-url: "+s.url+", document-url: "+window.location.href)}).catch(async e=>{console.error(e)})}else Object.keys(this.sampleData).length>0&&await this.retrieveSampleData(e,t)}async retrieveSampleData(e,t){if(".svg"===e.substr(-4)&&(e=e.substr(0,e.length-4)),0===this.sampleOptions.length)for(const[e,t]of Object.entries(this.sampleData))this.sampleOptions.push(e),this.sampleReadableName[t.name]=e;var s=Object.keys(this.sampleData),a="",i=[],o=[];if(!s.includes(e)&&this.topExpressionValues[t]){var r=0,n=void 0;for(const[e,a]of Object.entries(this.topExpressionValues[t]))a.compendium&&a.compendium[1]&&s.includes(a.compendium[1])&&a.maxAverage&&a.maxAverage[1]&&a.maxAverage[1]>r&&(r=a.maxAverage[1],n=a.compendium[1]);e=n||"AbioticStress"}"default"===e&&(e="AbioticStress");var l=this.sampleData[e];let d;if(l&&l.sample&&(d=l.sample),l&&l.db&&(a=l.db),void 0!==a){o=Object.keys(l.sample),i=[];for(var h=0;h<o.length;h++)i=i.concat(d[o[h]])}this.eFPObjects[e]&&this.eFPObjects[e].locusCalled.includes(t)?this.eFPObjects[e]&&await this.addSVGtoDOM(e,t,this.includeDropdownAll):await this.callPlantEFP(a,t,i,e,d)}async callPlantEFP(e,t,s,a,i){let o="https://bar.utoronto.ca/~asullivan/webservices/plantefp.cgi?";o+="datasource="+e+"&",o+="id="+t+"&",o+="samples=[";for(var r=0;r<s.length;r++){var n=s[r].trim();o+='"'+(n=(n=n.replace(/\+/g,"%2B")).replace(/ /g,"%20"))+'"',r!==s.length-1&&(o+=",")}o+="]";i?await fetch(o,{mode:"cors"}).then(async s=>{200===s.status?await s.text().then(async s=>{let o;o=s.length>0?JSON.parse(s):{};let r=Object.keys(i);void 0===this.eFPObjects&&(this.eFPObjects={}),void 0===this.eFPObjects[a]&&(this.eFPObjects[a]={}),void 0===this.eFPObjects[a].sample&&(this.eFPObjects[a].sample={}),void 0===this.eFPObjects[a].sample&&(this.eFPObjects[a].sample={});for(var n=0;n<o.length;n++){var l=o[n].name.trim(),d=o[n].value,h="",f=l;f=(f=(f=l.replace(/%2B/g,"+")).replace(/%20/g," ")).trim();for(var u=0;u<r.length;u++)i[r[u]].includes(f)&&(h=r[u],void 0===this.eFPObjects[a].sample[h]&&(this.eFPObjects[a].sample[h]={}),void 0===this.eFPObjects[a].sample[h][f]&&(this.eFPObjects[a].sample[h][f]={}),this.eFPObjects[a].sample[h][f][t]=d,this.eFPObjects[a].locusCalled||(this.eFPObjects[a].locusCalled=[]),this.eFPObjects[a].locusCalled.includes(t)||this.eFPObjects[a].locusCalled.push(t))}this.eFPObjects[a].db=e,await this.addSVGtoDOM(a,t,this.includeDropdownAll)}):200!==s.status&&(await this.addSVGtoDOM(a,t,this.includeDropdownAll),console.error("fetch error - Status Code: "+s.status+", fetch-url: "+s.url+", document-url: "+window.location.href))}).catch(async e=>{await this.addSVGtoDOM(a,t,this.includeDropdownAll),console.error(e)}):(await this.addSVGtoDOM(a,t,this.includeDropdownAll),console.error(`sampleSubunits is ${i}`))}async addSVGtoDOM(e,t,s=!1){var a="Klepikova";let i=(new DOMParser).parseFromString('<div class="expressionContainer"></div>',"text/html");if(i=i.querySelector(".expressionContainer"),""!==e&&(a=e),s&&this.sampleOptions){let a=0,v=0,m="";if(this.topExpressionValues[t]&&Object.keys(this.topExpressionValues[t]).length>0){m+='<option\n                        value="hiddenOption" \n                        id="hiddenExpressionOption"\n                        disabled="true"\n                    >\n                        Compendiums with maximum average expression:\n                    </option>',v+=1;for(var o=Object.keys(this.topExpressionValues[t]),r=0;r<o.length;r++)if(this.topExpressionValues[t][o[r]])for(var n=this.topExpressionValues[t][o[r]],l=n.compendium,d=0;d<Object.keys(l).length;d++){var h=d+1;if(n.compendium[h]){var f=n.compendium[h],u=n.sample[h];if(u&&this.sampleData[f]&&this.sampleData[f]&&this.sampleData[f].description){var c=this.sampleData[f].description[u],p=n.maxAverage[h];m+=`<option\n                                            value="${f}"\n                                        >\n                                            ${this.sampleData[f].name}: ${c} at ${p} (${o[r]})\n                                        </option>`,v+=1;break}}}}m+='<option\n                    value="hiddenOption" \n                    id="allCompendiumOptions"\n                    disabled="true"\n                >\n                    All compendiums:\n                </option>',v+=1;var g=Object.keys(this.sampleReadableName);g.sort();for(let t in g)m+=`<option\n                        value="${this.sampleReadableName[g[t]]}"\n                    >\n                        ${g[t]}\n                    </option>`,this.sampleReadableName[g[t]]===e&&(a=parseInt(v)+parseInt(t));let b=(new DOMParser).parseFromString(`<div class="selectSVGContainer">\n                    <span>Select SVG to display:</span> \n                    <select \n                        onchange="window.createSVGExpressionData.generateSVG('${t}', '${this.desiredDOMid}', this.value.toString(), ${s})"\n                        id="sampleOptions" \n                        value="${e}" \n                        class="selectCompendiumOptions"\n                    >\n                        ${m}\n                    </select>\n                </div>`,"text/html");(b=b.body.childNodes[0]).getElementsByTagName("select")[0].selectedIndex=a,i.appendChild(b)}i.appendChild((new DOMParser).parseFromString(`<span class="${e}">\n                <b>${e}</b>\n            </span>`,"text/xml").documentElement);var v="https://raw.githubusercontent.com/BioAnalyticResource/ePlant_Plant_eFP/master/compendiums/"+a+".min.svg";if(await fetch(v,{mode:"cors"}).then(async e=>{200===e.status?await e.text().then(async e=>{let s=(new DOMParser).parseFromString(e,"text/html").body.childNodes[0];s.id&&(this.svgObjectName=s.id,s.style="width: 95% !important;height: 95% !important;");let o=(new DOMParser).parseFromString(`<div id="${a}_object"></div>`,"text/html").body.childNodes[0];o.appendChild(s),i.appendChild(o),this.appendSVG=i,await this.createLocusMatch(a,t)}):200!==e.status&&console.error("fetch error - Status Code: "+e.status+", fetch-url: "+e.url+", document-url: "+window.location.href)}).catch(async e=>{console.error(e)}),this.desiredDOMid&&this.desiredDOMid.length>0){var m=document.getElementById(this.desiredDOMid);let e=m.childNodes;for(let t in e)e[t].className&&e[t].className.includes("expressionContainer")&&m.removeChild(e[t]);m.appendChild(this.appendSVG)}}async createLocusMatch(e,t){for(var s=t,a="",i=0;i<s.length;i++)a+=1===i||3===i?s[i].toLowerCase():s[i];await this.createSVGValues(e,t)}async createSVGValues(e,t){let s=[],a=this.eFPObjects[e].sample,i=Object.keys(a);for(var o=0;o<i.length;o++)s.push(a[i[o]]);for(var r=0;r<i.length;r++){var n=Object.keys(a[i[r]]);void 0===this.svgValues[i[r]]&&(this.svgValues[i[r]]={});for(var l=0;l<n.length;l++)void 0===this.svgValues[i[r]].rawValues&&(this.svgValues[i[r]].rawValues=[]),this.svgValues[i[r]].rawValues.push(a[i[r]][n[l]][t])}await this.findExpressionValues(e,i)}async findExpressionValues(e,t){this.svgMax=void 0,this.svgMin=void 0;for(var s=0;s<t.length;s++){for(var a=this.svgValues[t[s]].rawValues.sort(),i=[],o=0;o<a.length;o++)!1===isNaN(a[o])&&i.push(parseFloat(a[o]));for(var r=0,n=0;n<i.length;n++)r+=i[n];var l=r/i.length,d=i[i.length-1],h=i[1];void 0===this.svgMax?this.svgMax=d:d>this.svgMax&&(this.svgMax=d),void 0===this.svgMin?this.svgMin=h:h<this.svgMin&&(this.svgMin=h),void 0===this.svgMaxAverage?(this.svgMaxAverage=l,this.svgMaxAverageSample=t[s]):l>this.svgMaxAverage&&(this.svgMaxAverage=l,this.svgMaxAverageSample=t[s]),void 0===this.svgMinAverage?(this.svgMinAverage=l,this.svgMinAverageSample=t[s]):l<this.svgMinAverage&&(this.svgMinAverage=l,this.svgMinAverageSample=t[s]),void 0===this.svgValues[t[s]]&&(this.svgValues[t[s]]={}),this.svgValues[t[s]].average=l,this.svgValues[t[s]].sd=this.standardDeviationCalc(i);var f=this.sampleData[e],u=Object.keys(f.controlComparison);if(!1===u.includes(t[s])){for(var c="",p=0;p<u.length;p++)f.controlComparison[u[p]].includes(t[s])&&(c=u[p]);if(this.svgValues[c]&&this.svgValues[c].rawValues){for(var g=this.svgValues[c].rawValues,v=0,m=0;m<g.length;m++)v+=parseFloat(g[m]);var b=v/g.length,x=0,S=0;if(null!==b&&b>0&&l>0){l>b?(x=l-b,this.svgValues[t[s]].inductionValue=x):b>l&&(S=b-l,this.svgValues[t[s]].reductionValue=S);var A=l/b;this.svgValues[t[s]].expressionRatio=A,this.svgValues[t[s]].controlSampleName=c,this.svgValues[t[s]].controlAverage=b}}}}await this.colourSVGs(e,t)}standardDeviationCalc(e){var t=0,s=e.length;if(s>=1){for(var a=0,i=0,o=0;o<s;o++)i+=e[o];for(var r=i/s,n=0;n<s;n++)a+=Math.pow(e[n]-r,2);t=Math.sqrt(a/s)}return t}async colourSVGs(e,t){for(var s=0;s<t.length;s++){var a=this.svgMaxAverage,i=this.svgValues[t[s]].average;i<0&&(i=0);var o=null;a&&a>=0&&(o=i/a*100),o>100?o=100:o<0&&(o=0);var r=this.percentageToColour(o),n=parseFloat(i).toFixed(3),l=this.svgValues[t[s]].rawValues.length;this.svgValues[t[s]].expressionLevel=n,this.svgValues[t[s]].sampleSize=l,await this.colourSVGSubunit(e,t[s],r,n,l)}}percentageToColour(e){var t=parseInt(e);if(t>=0){return["#ffff00","#fffc00","#fff900","#fff700","#fef400","#fff200","#ffef00","#feed00","#ffea00","#ffe800","#ffe500","#ffe200","#ffe000","#ffdd00","#ffdb00","#ffd800","#ffd600","#fed300","#ffd100","#ffce00","#ffcc00","#ffc900","#ffc600","#ffc400","#ffc100","#ffbf00","#ffbc00","#ffba00","#ffb700","#feb500","#ffb200","#ffaf00","#ffad00","#ffaa00","#ffa800","#ffa500","#ffa300","#ffa000","#ff9e00","#ff9b00","#ff9900","#ff9600","#ff9300","#ff9100","#ff8e00","#ff8c00","#ff8900","#ff8700","#ff8400","#ff8200","#ff7f00","#ff7c00","#ff7a00","#ff7700","#ff7500","#ff7200","#ff7000","#ff6d00","#ff6b00","#ff6800","#ff6600","#ff6300","#ff6000","#ff5e00","#ff5b00","#ff5900","#ff5600","#ff5400","#ff5100","#ff4f00","#ff4c00","#ff4900","#ff4700","#ff4400","#ff4200","#ff3f00","#ff3d00","#ff3a00","#ff3800","#ff3500","#ff3200","#ff3000","#ff2d00","#ff2b00","#ff2800","#ff2600","#ff2300","#ff2100","#ff1e00","#ff1c00","#ff1900","#ff1600","#ff1400","#ff1100","#ff0f00","#ff0c00","#ff0a00","#ff0700","#ff0500","#ff0200","#ff0000"][t]}return"#808080"}async colourSVGSubunit(e,t,s,a,i=1){let o=this.appendSVG.lastElementChild.getElementsByTagName("svg")[0],r=[...o.getElementsByTagName("path"),...o.getElementsByTagName("g")];if(o&&r.length>0){var n=createSVGExpressionData.svgValues[t],l=void 0;this.sampleData[e].description&&(l=this.sampleData[e].description[t]),void 0!==l&&""!==l||(l=t);var d=["Control_Shoot_0_Hour","Cold_Shoot_0_Hour","Osmotic_Shoot_0_Hour","Salt_Shoot_0_Hour","Drought_Shoot_0_Hour","Genotoxic_Shoot_0_Hour","Oxidative_Shoot_0_Hour","UV-B_Shoot_0_Hour","Wounding_Shoot_0_Hour","Heat_Shoot_0_Hour"],h=["Control_Root_0_Hour","Cold_Root_0_Hour","Osmotic_Root_0_Hour","Salt_Root_0_Hour","Drought_Root_0_Hour","Genotoxic_Root_0_Hour","Oxidative_Root_0_Hour","UV-B_Root_0_Hour","Wounding_Root_0_Hour","Heat_Root_0_Hour"],f=!1,u=!1;let o;d.includes(t)?f=!0:h.includes(t)&&(u=!0);for(let e in r)r[e].id===t&&(o=r[e]);if(o&&o.childNodes.length>0){var c;c=o.childNodes;let e=!1;for(let t in c)"path"!==c[t].tagName&&"g"!==c[t].tagName||(c[t].setAttribute("fill",s),e=!0);e||o.setAttribute("fill",s)}else o&&o.setAttribute("fill",s);if(o){o.setAttribute("class","hoverDetails"),o.addEventListener("mouseenter",function(e){addTissueMetadata(this.id)}),o.addEventListener("mouseleave",function(e){removeTissueMetadata(this.id)}),o.setAttribute("data-expressionValue",a),o.setAttribute("data-sampleSize",i),o.setAttribute("data-standardDeviation",n.sd),o.setAttribute("data-sampleSize",i);var p=document.createElementNS("http://www.w3.org/2000/svg","title");p.textContent=l+"\nExpression level: "+a+"\nSample size: "+i+"\nStandard Deviation: "+parseFloat(n.sd).toFixed(3);o.appendChild(p)}if(f)for(let e in d){let t;for(let s in r)r[s].id===d[e]&&(t=r[s]);if(t){if(t.setAttribute("class","hoverDetails"),t.addEventListener("mouseenter",function(e){addTissueMetadata(this.id)}),t.addEventListener("mouseleave",function(e){removeTissueMetadata(this.id)}),(c=t.childNodes).length>0){let e=!1;for(var g=0;g<c.length;g++)"path"===c[g].tagName&&(c[g].setAttribute("fill",s),e=!0);e||t.setAttribute("fill",s)}else t.setAttribute("fill",s);p.textContent=d[e]+"\nExpression level: "+a+"\nSample size: "+i,t.appendChild(p)}}else if(u)for(let e in h){let t;for(let s in r)r[s].id===h[e]&&(t=r[s]);if(t){if(t.setAttribute("class","hoverDetails"),t.addEventListener("mouseenter",function(e){addTissueMetadata(this.id)}),t.addEventListener("mouseleave",function(e){removeTissueMetadata(this.id)}),(c=t.childNodes).length>0){let e=!1;for(g=0;g<c.length;g++)"path"===c[g].tagName&&(c[g].setAttribute("fill",s),e=!0);e||t.setAttribute("fill",s)}else t.setAttribute("fill",s);p.textContent=h[e]+"\nExpression level: "+a+"\nSample size: "+i,t.appendChild(p)}}}}}let createSVGExpressionData=new CreateSVGExpressionData;window.createSVGExpressionData=createSVGExpressionData;